#+TITLE: Hexagonal Architecture
#+SUBTITLE: Basic introduction using Python
#+AUTHOR: Victor Dorneanu
#+DATE: 2022-10
#+STARTUP: indent fold
#+SETUPFILE: reveal.org
#+EXPORT_FILE_NAME: ../public/2022/hexagonal-architecture/index.html
#+REVEAL_THEME: /themes/css/reveal-code-layers-multicolor.css
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: https://images.unsplash.com/photo-1659365071822-13d961c215d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&q=80
#+REVEAL_TITLE_SLIDE_BACKGROUND: https://images.unsplash.com/photo-1659365071822-13d961c215d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&q=80

* Introduction
Why should you chose {{{zk_topic(hexagonal-architecture,hexagonal architecture)}}} ?
- clean architecture helps with Secure by Design™
  - adopt "*shift left*" mentality and guarantee (application) Security
  - add Security to the early stages of the *SDLC*
- clear *separation* of concerns (fundamental in {{{zk_topic(information-hiding,Information hiding)}}})
  - hide details behind a {{{zk_topic(ddd#bounded-context,boundary)}}}
- help with *technical debt*
  - decouple ({{{zk_book(building-microservices-2nd-edition/#cohesion,Cohesion)}}} vs {{{zk_book(building-microservices-2nd-edition/#coupling,Coupling)}}}) business code from /technology code/
  - business should still grow without any hard dependencies on technological challenges
  - improve {{{zk_book(accelerate/#software-delivery-performance,software delivery performance)}}}
** Hexagonal Architecture in a nutshell
#+BEGIN_imagecontainer
#+CAPTION: Source https://yoan-thirion.gitbook.io/knowledge-base/software-craftsmanship/code-katas/clean-architecture#hexagonal-architecture-1
[[./images/hexagonal-architecture/hex-infra.png]]
#+END_imagecontainer
*** It's all about business logic
- explicit *separation* between what code is *internal* to the application and what is *external*
#+REVEAL_HTML: <div class="quoteblock">
#+begin_quote
The idea of Hexagonal Architecture is to put inputs and outputs at the edges of our design. Business logic should not depend on whether we expose a REST or a GraphQL API, and it should not depend on where we get data from --- a database, a microservice API exposed via gRPC or REST, or just a simple CSV file.
-- [[https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749][Ready for changes with hexagonal architecture | netflix blog]]
#+end_quote
#+REVEAL_HTML: </div>

** Ports & Adapters
#+BEGIN_imagecontainer
#+CAPTION: Source: https://threedots.tech/post/introducing-clean-architecture/
[[./images/hexagonal-architecture/ports-adapters.png]]
#+END_imagecontainer
*** Ports
- A *port* is an input to your application and the only way the *external* world can reach it
- Examples:
  - HTTP/gRPC ~servers~ handling requests from outside to your business application
  - CLI commands doing something with your business use cases
  - Pub/Sub message subscribers
*** Adapters
- Adapters are something that talk to the outside world
- you have to *adapt* your internal data structures to what it's expected outside
- Examples
  - SQL queries
  - HTTP/gRPC ~clients~
	- file readers/writers
- Some distinguish between
  - *primary/driving* adapters
  - *secondary/driven* adapters
*** Application logic/core
- a layer that glues together other layers
- also known as the place where "*use cases*" live at
- this is what *our code* is supposed to do (it's the *main* application)
- the application logic depends only on own /domain/ entities
  - if you cannot say which database is used for storing entities, that's a /good/ sign
  - if you cannot say which URLs it calls for doing authentication, that's a /good/ sign
  - in general: this layer is "free" of any /concrete/ implementation details
** Language-agnostic implementation
- I'll describe *use cases* for a concrete problem
- There are several *actors* involved
  - /uploader/
  - /product manager/
- I'll *abstractions* to define relationships between
  - /use cases/ and
  - concrete /implementations/
*** Uploader: use case description
#+begin_quote
As an uploader I'd like to upload documents to some infrastructure. After successful upload I'd like to get a link I can share with my friends.
-- Uploader
#+end_quote

Easy! Some observations:
- the uploader doesn't mention *where* (storage) the documents should be uploaded to
- the uploader doesn't mention *how* he/she would like to upload documents
  - via web client?
  - via mobile phone?
  - via CLI?
*** Product Manager: use case description
#+begin_quote
As a product manager I'd like to see how many documents each uploader uploads and how many times he/she shares the link.
-- Product Manager
#+end_quote

Also easy! Again some observations:
- PM doesn't mention *where* the metrics should be sent to
- PM doesn't mention *how* she would like to *view* the metrics
  - Via Web?
  - On her smartphone?
  - Using the CLI?
*** Use abstractions
- post-pone decision about concrete implementation details / concrete technologies
- focus on business cases and use abstractions (aka /interfaces/) whenever possible
- separate concerns
  - apply {{{zk_topic(information-hiding,information hiding)}}}
  - use {{{zk_topic(solid,SOLID)}}}
- you can apply this on different levels
  - structures
  - namespaces
  - modules
  - packages
  - {{{zk_topic(microservices,microservices)}}}
  - just keep *related* things within a boundary
	- in {{{zk_topic(ddd,DDD)}}} language: {{{zk_topic(ddd#bounded-context,boundary context)}}}
* Software Architecture: High-Level
#+begin_src plantuml :file ./images/hexagonal-architecture/example-hex-arch.png  :results file replace :cmdline -charset UTF-8 :exports none
@startuml
skinparam dpi 250

package "Business Domain ❶" as app_core {
    package "Entities" {
       entity Document {
         string file_path
         + meta(): String
       }
    }

    package Services {
       class DocumentUploadService {
         - storageRepository: DocumentStorageRepository
         + uploadDocument(file: Document)
       }
    }

	package Repositories {
       interface DocumentStorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	   }

       interface DocumentMetricsRepository {
		 + send_metrics()
	   }

	}
}

package "Primary/Driving Adapters ❷" as prim_adapters {
    class HTTPServer {
	 + run ()
	 + stop()
	}

    class CLICommand {
	 + execute ()
	}
}

package "Secondary/Driven Adapters ❸" as sec_adapters {
    class S3StorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	}

    class DropboxStorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	}

    class ELKMetricsRepository {
		 + send_metrics()
	}

}

prim_adapters -up[hidden]- app_core
sec_adapters -down[hidden]- app_core

DocumentUploadService --> DocumentStorageRepository: uses
DocumentUploadService --> DocumentMetricsRepository: uses
DocumentUploadService --> Document: uses

S3StorageRepository -right-> DocumentStorageRepository: implements
DropboxStorageRepository -right-> DocumentStorageRepository: implements
ELKMetricsRepository -right-> DocumentMetricsRepository: implements

S3StorageRepository -up-> AWS_S3: calls
DropboxStorageRepository -up-> Dropbox: calls
ELKMetricsRepository -up-> ELK: calls

HTTPServer --> DocumentUploadService: uses
CLICommand --> DocumentUploadService: uses
@enduml
#+end_src

#+RESULTS:
[[file:./images/hexagonal-architecture/example-hex-arch.png]]


#+BEGIN_imagecontainer
#+REVEAL_HTML: <div class="column" style="width: 95%; margin: 0 auto; ">
#+CAPTION: Architecture of some imaginary application which uploads some documents to a storage system
[[./images/hexagonal-architecture/example-hex-arch.png]]
#+REVEAL_HTML: </div>
#+END_imagecontainer

** Software Architecture: High-Level (explanations)
- The /Business Domain/ ❶ contains
  - /Entities/ (there is only ~Document~)
  - /Services/ (~DocumentUploadService~)
  - /Repositories/ (~DocumentStorageRepository~ and ~DocumentMetricsRepository~)
	- basically interfaces to be implemented by the /Secondary Adapters/ ❸
- The /Secondary (Driven) Adapters/ implement
  - the repositories/interfaces defined in the /Business Domain/ ❶
- The /Primary (Driving) Adapters/ ❷ use the /Services/
  - a CLI could implement the ~DocumentUploadService~ for the terminal
  - a HTTP server could serve the ~DocumentUploadService~ via HTTP

* Domain
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%;">
- everything related to the *business case*
  - uploader wants to upload some document
  - PM wants to have some metrics
- contains
  - /Entities/
  - /Services/
  - /Repositories/Interfaces/
#+REVEAL_HTML: </div>

#+begin_src plantuml :file ./images/hexagonal-architecture/example-hex-arch-domain.png  :results file replace :cmdline -charset UTF-8 :exports none
@startuml
skinparam dpi 300

package "Business Domain ❶" as app_core <<Node>> {
    package "Entities" {
       entity Document {
         string file_path
         + meta(): String
       }
    }

    package Services {
       class DocumentUploadService {
         - storageRepository: DocumentStorageRepository
         + uploadDocument(file: Document)
       }
    }

	package Repositories {
       interface DocumentStorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	   }

       interface DocumentMetricsRepository {
		 + send_metrics()
	   }

	}
}



DocumentUploadService --> DocumentStorageRepository: uses
DocumentUploadService --> DocumentMetricsRepository: uses
DocumentUploadService --> Document: uses
@enduml
#+end_src

#+RESULTS:
[[file:./images/hexagonal-architecture/example-hex-arch-domain.png]]

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%;">
#+CAPTION: The business domain contains the application login and uses abstractions (interfaces) for defining interactions.
[[file:images/hexagonal-architecture/example-hex-arch-domain.png]]
#+REVEAL_HTML: </div>

** Entities
#+BEGIN_leftcol50
#+begin_src python
class Document ():                        ❶
	"""A document is an entity"""
	def __init__(self, path: FilePath):
		self._file_path = path            ❷

	def meta(self):
	"""Display meta information about the file"""
		print("Some information")
#+end_src
#+END_leftcol50

#+BEGIN_rightcol50
#+ATTR_REVEAL: :frag t
- We only have ~Document~ ❶ as an *entity*
- The constructor will set an instance variable ❷ for storing the file path
#+END_rightcol50

** Services
*** UploadDocumentService
:PROPERTIES:
:REVEAL_EXTRA_ATTR: data-auto-animate
:END:

#+BEGIN_leftcol50
#+ATTR_REVEAL: :data_id foo
#+begin_src python
class UploadDocumentService:           ❶
	"""Upload a document to storage repository"""

	def __init__(
		self,
		storage_repository: DocumentStorageRepository,
		metrics_repository: DocumentMetricsRepository,
	):
		self._storage_repo: DocumentStorageRepository
		self._metrics_repo: DocumentMetricsRepository

	def upload_document(self, document: Document):   ❷
		self._storage_repository(document)
		self._metrics_repo.send_metrics()
#+end_src
#+END_leftcol50

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol50
- ❶ We have an ~UploadDocumentService~
- ❷ this service implements ~upload_document(document: Document)~
#+END_rightcol50

* Repositories
#+REVEAL_HTML: <div class="column" style="float:left; width: 30%;">
The repositories are basically /interfaces/ for the /secondary (driven) adapters/. In our case we have:
- a repository for dealing with document *storage*
  - define how to ~save~ documents
  - define how to ~search~ for documents
  - define how to ~delete~ a document
- a repository for dealing with *metrics*
#+REVEAL_HTML: </div>

#+begin_src plantuml :file ./images/hexagonal-architecture/example-hex-arch-repos.png  :results file replace :cmdline -charset UTF-8 :exports none
@startuml
skinparam dpi 300

package "3rd-party Libraries" as 3rd_party <<Node>> {
    class AWS_S3 {}
    class Dropbox {}
    class ELK {}
}

package "Business Domain ❶" as app_core <<Node>> {
	package Repositories {
	   interface DocumentStorageRepository {
		 + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	   }

		interface DocumentMetricsRepository {
			 + send_metrics()
		}
	}
}

package "Secondary/Driven Adapters ❸" as sec_adapters <<Node>> {
    class S3StorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	}

    class DropboxStorageRepository {
	     + save(Document)
		 + search(): List[Document]
		 + delete(Document)
	}

    class ELKMetricsRepository {
		 + send_metrics()
	}

}

sec_adapters -down[hidden]- app_core

S3StorageRepository -right-> DocumentStorageRepository: implements
DropboxStorageRepository -right-> DocumentStorageRepository: implements
ELKMetricsRepository -right-> DocumentMetricsRepository: implements

S3StorageRepository -up-> AWS_S3: calls
DropboxStorageRepository -up-> Dropbox: calls
ELKMetricsRepository -up-> ELK: calls
@enduml
#+end_src

#+RESULTS:
[[file:./images/hexagonal-architecture/example-hex-arch-repos.png]]

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%;">
#+CAPTION: The interfaces are implemented by adapters which use concrete 3rd-party libraries for "external" calls.
[[file:images/hexagonal-architecture/example-hex-arch-repos.png]]
#+REVEAL_HTML: </div>

** Storage
#+BEGIN_leftcol60
#+begin_src python
from import abc import ABC, abstractmethod

class DocumentStorageRepository(ABC):      ❶
	""" Driven port defining an interface for storing documents """
	@abstractmethod
	def save(self, path: FilePath):
		pass

	@abstractmethod
	def search(self, uuid: uuid):
		pass

	@abstractmethod
	def delete(self, uuid: uuid):
		pass
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
❶ ~DocumentStorageRepository~ is an /interface/ (a /port/) for describing which methods a /document storage/ implementation should have
#+END_rightcol40
** Metrics
#+BEGIN_leftcol60
#+begin_src python
from import abc import ABC, abstractmethod

class DocumentMetricsRepository(ABC):    ❶
""" Driven port defining an interface for sending metrics about documents"""
@abstractmethod
	def send_metrics(self):
		pass
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
❶ ~DocumentMetricsRepository~ is an /interface/ (a /port/) for describing which methods a /metrics system/ implementation should have
#+END_rightcol40
* Adapters
** Primary / driving
*** HTTP handler
The *handler* only depends on *entities* and *services*.

#+BEGIN_leftcol60
#+begin_src python
# HTTP controller
from flask import Flask, request
from domain.services import UploadDocumentService
from domain.entities import Document

app = Flask(__name__)

class HTTPController:
    def __init__(self, upload_service: UploadDocumentService):  ❶
	    self.upload_service = upload_service

	@app.route(self, '/upload', methods=['POST'])
	def upload_document():
		"""Uploads a document using DocumentUploadService """
		# Create a document object
		doc = entities.Document(request.form.get("document_path"))
        self.upload_service.upload_document(doc)                ❷
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
- ❶ The ~HTTPController~ expects a ~UploadDocumentService~
  - we use an /abstraction/ rather than a /concrete/ implementation
- ❷ We use the ~upload_service~ to upload a document (of type ~entities.Document~)
#+END_rightcol40
*** CLI handler
The *handler* only depends on *entities* and *services*.

#+BEGIN_leftcol60
#+ATTR_REVEAL: :frag t :frag-idx 2
#+begin_src python
# Simpl CLI controller
import sys, getopt
from domain.services import UploadDocumentService
from domain.entities import Document

class CLIController:
    def __init_(self, arguments, upload_service: UploadDocumentService):  ❶
	    self.args = arguments
		self.upload_service = upload_service

	def upload(self):
	   inputfile = ''
	   try:
		  opts, args = getopt.getopt(self.args,"hi:",["ifile="])
	   except getopt.GetoptError:
		  print 'cli.py -i <inputfile>'
		  sys.exit(2)

	   for opt, arg in opts:
		  if opt == '-h':
			 print 'cli.py -i <inputfile>'
			 sys.exit()

		  elif opt in ("-i", "--ifile"):
			 inputfile = arg


	   # Create document object
	   doc = Document(inputfile)
	   service.upload_service.upload_document(doc)                   ❷
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
- ❶ ~CLIController~ expects an ~UploadDocumentService~
- uses its ~upload_document~ method to upload ❷ a document (of type ~entities.Document~)
#+END_rightcol40
** Secondary / driven
*** S3
#+BEGIN_leftcol60
#+ATTR_REVEAL: :frag t :frag-idx 2
#+begin_src python
from domain.entities import Document

class S3StorageRepository:
    """Implements DocumentStorageRepository """
	def __init__(self):
	    # Initiate here connection to AWS S3
		self.s3_conn = ...

	def save(self, doc: Document):                   ❶
	    # Read file contents
		content = get_file_content(doc)
		self.s3_conn.create_new_object(content, ...) ❷

	def search(): List[Document]                     ❸
	    # Search in S3 buckets and return list of documents
		doc_list = []
		for f in results:
		    # Create a document
			doc = Document(f.path())
			doc_list.append(doc)
		return doc_list
	...
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
- ~S3StorageRepository~ implements ~DocumentStorageRepository~ (interface)
- ~save~ takes as an argument a ~Document~ and ❷ defines how and where to save the document
  - these are implementation specific details
- ❸ ~search~ will return a list of ~Document~
  - instead of a /S3/ object
#+END_rightcol40
*** ELK
#+BEGIN_leftcol60
#+ATTR_REVEAL: :frag t :frag-idx 2
#+begin_src python
from domain.entities import Document

class ELKMetricsRepository:
    """Implements DocumentMetricsRepository """
	def __init__(self):
	    # Initiate here connection to ELK stack
		self.elk_conn = ...             ❶

    def send_metrics():
	    self.elk_conn.send_data(...)    ❷
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
- ~ELKMetricsRepository~ implements ~DocumentMetricsRepository~ (interface)
- ❶ and ❷ are ELK (Elasticsearch, Logstash, Kibana) specific implementation details
#+END_rightcol40
* Package MAIN
Here is where *everything* comes together.
#+BEGIN_leftcol60
#+ATTR_REVEAL: :frag t :frag-idx 2
#+begin_src python
package main

def main():
        # Create new S3 storage repository
        s3_repo = repositories.S3StorageRepository()      ❶

        # Create new ELK metrics repository
        elk_repo = repositories.ELKMetricsRepository()    ❷

        # Create new upload service                       ❸
        upload_service = services.UploadDocumentService(s3_repo, elk_repo)

        # Create new HTTP controller/handler              ❹
        http_server = controller.HTTPController(upload_service)
        http_server.Start()

if __name__ == "__main__":
    main()
#+end_src
#+END_leftcol60

#+ATTR_REVEAL: :frag t
#+BEGIN_rightcol40
- ~main~ is where everything is /glued/ together
- first we initialize concrete implementations (❶ and ❷)
- the upload service /constructor/ ❸ expects 2 interfaces
  - ~DocumentStorageRepository~ and ~DocumentMetricsRepository~
  - ~s3_repo~ and ~elk_repo~ satisfy this /signature/
- the HTTP handler /constructor/ (an /adapter/) expects an ~UploadDocumentService~ (service)
  - ~upload_service~ can be used as an argument to create the HTTP handler
#+END_rightcol40
* Conclusion
- the goal is to have *maintainable* code
- changes on code level should be *easy* and *safe* to make
- *abstract away* implementations details
- separate concerns ({{{zk_topic(ddd,DDD)}}})
- also pay attention how you *structure* your code base
- some words on [[https://realpython.com/lessons/duck-typing/#:~:text=Duck%20typing%20is%20a%20concept,a%20given%20method%20or%20attribute.][duck typing]] (for dynamic programming languages)
  - you can argue that for e.g. /Python/ you don't need explicit types for parameters
  - Python (and JS) are duck-typed and give the best flexibility
	- however, *runtime* errors are sometimes hard to spot
  - static typed languages (C/C++, TS, {{{zk_topic(golang,Golang)}}}, Java, Scala etc.) require *compile-time* checks
	- make you explicitly use the type (nominal-typed languages) as strict dependency
	  - e.g. /Java/
	- make sure object/struct has implemented methods (structural-type languages)
	  - e.g. {{{zk_topic(golang,Golang)}}}
* Resources
- Clean Architecture (and variants)
  - [[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html][Clean Architecture (by Uncle Bob)]]
  - [[https://alistair.cockburn.us/hexagonal-architecture/][The Hexagonal Architecture (by Alistair Cockburn)]]
  - [[https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/][The Onion Architecture]]
- Hexagonal Architecture
  - [[https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/][DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together]]
	- great stuff, awesome graphics
	- make sure you also read his other [[https://herbertograca.com/category/development/series/][posts]]
- [[https://beyondxscratch.com/2017/08/19/hexagonal-architecture-the-practical-guide-for-a-clean-architecture/][Hexagonal Architecture: The practical guide for clean architecture]]
- [[https://www.informatik-aktuell.de/entwicklung/methoden/domain-driven-design-im-hexagon.html][Domain-Driven Design (DDD) im Hexagon (german)]]
  - [[http://www.codingthearchitecture.com/2015/03/08/package_by_component_and_architecturally_aligned_testing.html][Package by component and architecturally-aligned testing]] (how to design your packages/components)
  - [[https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749][Ready for changes with Hexagonal Architecture (netflix tech blog)]]
- Python
  - [[https://douwevandermeij.medium.com/hexagonal-architecture-in-python-7468c2606b63][Hexagonal Architecture in Python]]
  - [[https://www.bustawin.com/big-sheets/][Big Sheets – Domain Driven Design with a hexagonal architecture]]
  - [[https://github.com/serfer2/flask-hexagonal-architecture-api][Simple example of Python Flask API following SOLID and Hexagonal Architecture principles]]
- Images
  - [[https://unsplash.com/photos/LUamzOIFw6M][Background image]]
* Contact
- About ::  [[https://dornea.nu][dornea.nu]]
- Blog :: [[https://blog.dornea.nu][blog.dornea.nu]]
- Github :: [[https://github.com/dorneanu][github.com/dorneanu]]
- Twitter :: [[https://twitter.com/victordorneanu][@victordorneanu]]
- LinkedIn :: [[https://www.linkedin.com/in/victor-dorneanu-4bba23101][linkedin.com/in/victor-dorneanu]]
- Threema :: [[https://threema.id/HCPNAFRD][HCPNAFRD]]
* Setup                                                                         :noexport:
# Local variables:
# after-save-hook: org-re-reveal-export-to-html
# org-re-reveal-progress: nil
# end:
