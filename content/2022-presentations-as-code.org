#+TITLE: Presentation as Code
#+SUBTITLE: Create modern presentations using ORG mode and reveal.js
#+AUTHOR: Victor Dorneanu
#+DATE: 2022-01
#+STARTUP: indent fold

#+SETUPFILE: reveal.setup
#+EXPORT_FILE_NAME: ../public/2022/presentation-as-code/index.html
#+REVEAL_THEME: /themes/css/reveal-code-relax.css

* Motivation
- because I was sick of Powerpoint
  - but also Latex was/is at some point way to much for a simple presentation
- [[https://orgmode.org/][ORG]] file should be single source of truth
  - you can export to multiple formats
    - PDF
    - HTML
    - Markdown/Asciidoc etc.
    - but also [[https://revealjs.com/][reveal.js]] presentations
- reveal.js looks awesome
  - the are lots of [[https://github.com/rajgoel/reveal.js-plugins][plugins]]
  - and lots of [[https://github.com/hakimel/reveal.js/wiki/Example-Presentations][examples]]
- highly inspired by [[https://zenika.github.io/adoc-presentation-model/reveal/reveal-my-asciidoc.html][Reveal my Asciidoc - A deep dive into presentation-as-code]]
  - but I wanted to do it without ~asciidoc~
  - "purely" in Emacs and ORG mode
* Navigation
These keyboard shortcuts are available:
- ~?~: to see the help menu
- navigation:
  - ~l~: next slide
  - ~h~: previous slide
  - ~k~: navigate up
  - ~j~: navigate down
- ~m~: to toggle menu
  - you can switch between themes
  - you can jump directly to slides
- ~ESC~ / ~O~: slide overview
- ~CTRL+SHIFT F~: search in presentation

* Features
- this presentation uses CDN to fetch required (JavaScript) libraries
  - no need to checkout reveal.js repository
  - if you want to use your own [[https://revealjs.com/themes/][theme]], then you'll need to have the CSS files somewhere on your disk
- you can easily embed nice looking *charts* and *diagrams*
  - I like [[https://c3js.org/][c3js]] for charts and [[https://plantuml.com/][plantuml]] for diagrams
  - but you can add your libraries (check ~#REVEAL_HEAD_PREAMBLE~ at the beginning of the [[https://github.com/dorneanu/slides/blob/main/content/reveal.org][reveal.org]] file)
- diagrams are embedded as inline PNG (encoded as ~base64~) in the resulting HTML document
  - I use a [[https://emacs.stackexchange.com/questions/36091/how-to-write-a-hook-to-transform-each-image-reference-on-export][hook]] to transform each PNG into base64 on export
  - This hook is part of the project variables defined in [[https://github.com/dorneanu/slides/blob/main/.dir-locals.el][.dir-locals.el]]
- I distinguish between [[https://github.com/dorneanu/slides/tree/main/content][content]] and generated HTML/CSS content (available at [[https://github.com/dorneanu/slides/tree/main/public][public]])

* Where to start?
For the beginning I'd recommend you the following steps:
- you decide which one to use: [[https://github.com/yjwen/org-reveal][org-reveal]] or [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]]
  - I personally prefer [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]]
- have a look at [[https://github.com/dorneanu/slides][this repository]]
- feel free to use my [[https://github.com/dorneanu/slides/blob/main/content/reveal.org][reveal.org]] template
- I use project specific variables defined in [[https://github.com/dorneanu/slides/blob/main/.dir-locals.el][.dir-locals.el]]
  - content of [[https://github.com/dorneanu/slides/blob/main/content/revealjs-plugins-conf.js][revealjs-plugins-conf.js]] is assigned to ~org-re-reveal-init-script~
  - use a hook to convert every PNG file into base64 data and insert it directly into the HTML document

* What if you don't use ORG and Emacs?
- *Don't worry*!
- You can still use plain HTML to create your reveal.js presentation (not really recommended)
- You could use [[https://revealjs.com/markdown/][markdown]]
- Have a look at [[https://asciidoctor.org/][asciidoctor]] (asciidoc syntax) and[[https://docs.asciidoctor.org/reveal.js-converter/latest/][ asciidoctor reveal.js]]
  + asciidoc syntax is really simple
  + you have great support for charts, source code listings and many other things
  + also checkout [[https://github.com/Zenika/adoc-presentation-model][Zenika's adoc presentation model]] repository for a full-featured example
- you can also export from ORG to asciidoctor using [[https://github.com/yashi/org-asciidoc/issues/14][org-asciidoc]]
  + recently I've submitted an [[https://github.com/yashi/org-asciidoc/issues/14][issue]] for better literals support
* Showcase
Now it's time for some demos
#+ATTR_REVEAL: :frag (appear)
- Charts using *C3.js*
- Diagrams using *PlantUML*
- *Literate programming*
* C3.js
Awesome [[https://d3js.org/][D3.js]] based chart library. Basic usage in the ORG file:

#+ATTR_REVEAL: :code_attribs roll-in
#+begin_src html
#+begin_export html
<div id="chart_example"></div>
var chart = c3.generate({
    bindto: '#chart_example',
    size: {
      width: <svg width>,
      height: <svg height>,
    },
    data: {
     <Your data>
    }
});
<script>
#+end_export
#+end_src
All charts are *interactive*. So make sure you use your mouse! And have a look at all [[https://c3js.org/examples.html][examples]].
** Basic line chart

#+begin_src python :noweb-ref c3jslinechart :exports none
htmlCode = """<div id="chart"></div>
<script>
var chart = c3.generate({
    bindto: '#chart',
    size: {
      width: 800,
      height: 550,
    },
    data: {
      columns: [
        ['data1', 30, 200, 100, 400, 150, 250],
        ['data2', 50, 20, 10, 40, 15, 25]
      ]
    }
});
</script>"""
#+end_src

#+REVEAL_HTML: <div class="column" style="float:left; width: 30%; font-size: 14px;">
#+begin_src python :exports results :results output :wrap src html :noweb yes
<<c3jslinechart>>
print("#+begin_export html\n{}\n#+end_export".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>


#+REVEAL_HTML: <div class="column" style="float:right; width: 70%">
#+begin_src python :exports results :results output html :noweb yes
<<c3jslinechart>>
print("{}".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>

** Pie chart
#+begin_src python :noweb-ref c3jspiechart :exports none
htmlCode = """<div id="chart2"></div>
<script>
var chart = c3.generate({
    bindto: '#chart2',
    size: {
      width: 600,
      height: 550,
    },
    data: {
        columns: [
            ['data1', 30],
            ['data2', 120],
            ["setosa", 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2],
            ["versicolor", 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1.0, 1.3, 1.4, 1.0, 1.5, 1.0, 1.4, 1.3, 1.4, 1.5, 1.0, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1.0, 1.1, 1.0, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1.0, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3],
            ["virginica", 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2.0, 1.9, 2.1, 2.0, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2.0, 2.0, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2.0, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2.0, 2.3, 1.8],
        ],
        type : 'donut',
        onclick: function (d, i) { console.log("onclick", d, i); },
        onmouseover: function (d, i) { console.log("onmouseover", d, i); },
        onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    donut: {
        title: "Iris Petal Width"
    }
});
</script>
"""
#+end_src

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%; font-size: 14px;">
#+begin_src python :exports results :results output :wrap src html :noweb yes
<<c3jspiechart>>
print("#+begin_export html\n{}#+end_export".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>


#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
#+begin_src python :exports results :results output html :noweb yes
<<c3jspiechart>>
print("{}".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>

** Combination of line and bar chart
#+begin_src python :noweb-ref c3jscombination :exports none
htmlCode = """<div id="chart3"></div>
<script>
var chart = c3.generate({
    bindto: '#chart3',
    data: {
        columns: [
            ['data1', 30, 20, 50, 40, 60, 50],
            ['data2', 200, 130, 90, 240, 130, 220],
            ['data3', 300, 200, 160, 400, 250, 250],
            ['data4', 200, 130, 90, 240, 130, 220],
            ['data5', 130, 120, 150, 140, 160, 150],
            ['data6', 90, 70, 20, 50, 60, 120],
        ],
        type: 'bar',
        types: {
            data3: 'spline',
            data4: 'line',
            data6: 'area',
        },
        groups: [
            ['data1','data2']
        ]
    },
    size: {
      width: 800,
      height: 550,
    }
});
</script>"""
#+end_src

#+REVEAL_HTML: <div class="column" style="float:left; width: 30%; font-size: 14px;">
#+begin_src python :exports results :results output :wrap src html :noweb yes
<<c3jscombination>>
print("#+begin_export html\n{}\n#+end_export".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 70%">
#+begin_src python :exports results :results output html :noweb yes
<<c3jscombination>>
print("{}".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>

** Custom data colors
#+begin_src python :noweb-ref c3jscustomcolors :exports none
htmlCode = """<div id="chart4"></div>
<script>
var chart = c3.generate({
    bindto: '#chart4',
    size: {
      width: 700,
      height: 550,
    },
    data: {
        columns: [
            ['data1', 30, 20, 50, 40, 60, 50],
            ['data2', 200, 130, 90, 240, 130, 220],
            ['data3', 300, 200, 160, 400, 250, 250]
        ],
        type: 'bar',
        colors: {
            data1: '#ff0000',
            data2: '#00ff00',
            data3: '#0000ff'
        },
        color: function (color, d) {
            // d will be 'id' when called for legends
            return d.id && d.id === 'data3' ? d3.rgb(color).darker(d.value / 150) : color;
        }
    }
});
</script>"""
#+end_src

#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 14px;">
#+begin_src python :exports results :results output :wrap src html :noweb yes
<<c3jscustomcolors>>
print("#+begin_export html\n{}\n#+end_export".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+begin_src python :exports results :results output html :noweb yes
<<c3jscustomcolors>>
print("{}".format(htmlCode))
#+end_src
#+REVEAL_HTML: </div>
* Diagrams
I like to express myself through pictures/diagrams. A picture is still worth a thounsand words. That's why I use them:
- to visualize
  + software architecture
  + (cloud) infrastructure
  + depedencies between some components
  + mind maps
- to document
  + architectural decisions
  + overall project state
** Plantuml
Let me quote [[https://en.wikipedia.org/wiki/PlantUML][Wikipedia]]:
#+begin_quote
PlantUML is an open-source tool allowing users to create diagrams from a plain text language. Besides various UML diagrams, PlantUML has support for various other software development related formats (such as Archimate, Block diagram, BPMN, C4, Computer network diagram, ERD, Gantt chart, Mind map, and WBD), as well as visualisation of JSON and YAML files.
\\
The language of PlantUML is an example of a domain-specific language. Besides its own DSL, PlantUML also understands AsciiMath, Creole, DOT, and LaTeX. It uses Graphviz software to layout its diagrams and Tikz for LaTeX support. Images can be output as PNG, SVG, LaTeX and even ASCII art. PlantUML has also been used to allow blind people to design and read UML diagrams.
#+end_quote

Just give it a try. You won't regret it! Also check out [[https://real-world-plantuml.com/][real-worl-plantuml.com]] for some *real* examples.

Basic usage in ORG:

#+begin_src fundamental
,#+begin_src plantuml :noweb-ref <id> <options>
@startuml
...
@enduml
,#+end_src
#+end_src

*** Components
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: Component diagram
#+begin_src uml :noweb-ref pumlcomponent :exports code :results none
@startuml
scale 720 width
skinparam dpi 300
skinparam backgroundcolor transparent
note as n
	ActiveRecord
	("save yourself")
end note

note left of Ballot
	Ballot ballot = new Ballot( ... );
	ballot.save();
end note
@enduml
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/component.png  :exports results :noweb yes
<<pumlcomponent>>
#+end_src
#+REVEAL_HTML: </div>

*** Components
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: Full component diagram
#+begin_src text :exports code :noweb-ref pumlcomponentsfull
@startuml
scale 720 width
skinparam dpi 300
skinparam backgroundcolor transparent
note as n
	ActiveRecord
	("save yourself")
end note

class DAO{
	{static} Entity find(id)
	{static} List<Entity> findBy(criteria for select)
	update(Entity)
	save(Entity)
	delete(Entity)
	{static} Finder
}

Ballot --|> DAO

note left of Ballot
	Ballot ballot = new Ballot( ... );
	ballot.save();
end note
@enduml
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/component-full.png  :exports results :noweb yes
<<pumlcomponentsfull>>
#+end_src
#+REVEAL_HTML: </div>

*** Sequence diagram

#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: Some sequence diagram example
#+begin_src text :exports code :noweb-ref pumlsequence
@startuml
scale 720 width
skinparam dpi 300
skinparam backgroundcolor transparent

skinparam Shadowing false


Alice -> Bob: Authentication Request
Bob -> RequestHandler: validated Authenticated Request
RequestHandler --> Bob: Authenticated Response (OK)
Bob --> Alice: Authentication Response (OK)
@enduml
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/sequence.png  :exports results :noweb yes
<<pumlsequence>>
#+end_src
#+REVEAL_HTML: </div>

*** Display JSON data
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: JSON Code
#+begin_src json :exports code :noweb-ref pumljson
@startjson
#highlight "lastName"
#highlight "address" / "city"
#highlight "phoneNumbers" / "0" / "number"
{
  "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 28,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021-3100"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [],
  "spouse": null
}
@endjson
#+end_src
#+REVEAL_HTML: </div>


#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/json.png  :exports results :noweb yes
<<pumljson>>
#+end_src
#+REVEAL_HTML: </div>
*** Same for YAML
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: YAML Code
#+begin_src yaml :exports code :noweb-ref pumlyaml
@startyaml
#highlight "french-hens"
#highlight "xmas-fifth-day" / "partridges"

doe: "a deer, a female deer"
ray: "a drop of golden sun"
pi: 3.14159
xmas: true
french-hens: 3
calling-birds:
    - huey
    - dewey
    - louie
    - fred
xmas-fifth-day:
    calling-birds: four
    french-hens: 3
    golden-rings: 5
    partridges:
        count: 1
        location: "a pear tree"
    turtle-doves: two
@endyaml

#+end_src
#+REVEAL_HTML: </div>


#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/yaml.png  :exports results :noweb yes
<<pumlyaml>>
#+end_src
#+REVEAL_HTML: </div>
*** Simple network diagrams
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 19px;">
#+CAPTION: Network diagram
#+begin_src text :exports code :noweb-ref pumlnetwork
@startuml
scale 720 width
skinparam dpi 300
skinparam backgroundcolor transparent

nwdiag {
  network NETWORK_BASE {
   width = full
   dev_A   [address = "dev_A" ]
   dev_B [address = "dev_B" ]
  }
  network IntNET1 {
   width = full
   dev_B [address = "dev_B1" ]
   dev_M [address = "dev_M1" ]
  }
}
@enduml
#+end_src
#+REVEAL_HTML: </div>


#+REVEAL_HTML: <div class="column" style="float:right; width: 60%; height: 550px;">
#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/network.png :exports results :noweb yes
<<pumlnetwork>>
#+end_src
#+REVEAL_HTML: </div>
*** C4 ACME Example
#+CAPTION: C4 ACME Example
#+begin_src plantuml :exports none :noweb-ref pumlc4acme
@startuml
scale 720 width
skinparam dpi 300
skinparam backgroundcolor transparent

!include  <C4/C4_Context.puml>
!include <office/Users/user.puml>

LAYOUT_WITH_LEGEND()


title Top level Context diagram for ACME Global Widget Production


Person(AcmeProdOwner, Acme Production Owner , "<$user> \n Responsible for Production of widgets in ACME Production Site" )
Person(3rdProdOwner, 3rdParty Production Owner , "<$user> \n Responsible for Production of widgets in 3rdParty Production Site" )


System_Boundary(Remote, "Remote") {

    System(ProdSystemHost, "Production Host", "Drives widget Production\n Analyses widget Production data to create reports")
    System(Analytics, "Analytics", "Provides data analysis and a dashboard view data - including relevant Production data")
    System(Monitoring, "Monitoring", "Monitors Production Host\nUses AWS Services")
    System_Ext(SupplyChain, "SupplyChain", "Provides parts to make the widgets")
    System_Ext(InventoryTracking, "InventoryTracking", "Customer Reference")


}



Enterprise_Boundary(AcmeProd, "ACME Production Site") {

    System(AcmeWorkStation1, "WorkStation1", " Production setup for a group of widgets")
    System(AcmeWorkStation2, "WorkStation2", " Production setup for a group of widgets")
    System(AcmeWorkStationN, "WorkStationN", " Production setup for a group of widgets")

}


Enterprise_Boundary(3rdProd, "3rdParty Production Site") {


    System(3rdWorkStation1, "WorkStation1", " Production setup for a group of widgets")
    System(3rdWorkStation2, "WorkStation2", " Production setup for a group of widgets")
    System(3rdWorkStationN, "WorkStationN", " Production setup for a group of widgets")
}


Rel_U(AcmeWorkStation1, ProdSystemHost, "Sends Production report for widget")
Rel_U(AcmeWorkStation2, ProdSystemHost, "Sends Production report for widget")
Rel_U(AcmeWorkStationN, ProdSystemHost, "Sends Production report for widget")


Rel_U(3rdWorkStation1, ProdSystemHost, "Sends Production report for widget")
Rel_U(3rdWorkStation2, ProdSystemHost, "Sends Production report for widget")
Rel_U(3rdWorkStationN, ProdSystemHost, "Sends Production report for widget")





Rel_D(AcmeProdOwner, ProdSystemHost, "Reviews Acme and 3rdParty site Production reports")
Rel_D(3rdProdOwner, ProdSystemHost, "Reviews 3rdParty site Production reports")


Rel_D(Analytics, ProdSystemHost, "Data Analysis")
Rel_D(SupplyChain, ProdSystemHost, "Parts")
Rel_D(InventoryTracking, ProdSystemHost, "Tracking")
Rel_D(Monitoring, ProdSystemHost, "Monitoring")

footer %filename() rendered with PlantUML version %version()\nThe Hitchhiker’s Guide to PlantUML

@enduml
#+end_src


#+ATTR_HTML: :class glightbox
#+begin_src plantuml :file images/c4.png  :exports results :noweb yes
<<pumlc4acme>>
#+end_src
*** Source C4 ACME Example
#+REVEAL_HTML: <div style="overflow: scroll; height: 500px;">
#+begin_src text :exports code :noweb yes
<<pumlc4acme>>
#+end_src
#+REVEAL_HTML: </div>
*** Additional resources
- [[https://crashedmind.github.io/PlantUMLHitchhikersGuide/][The Hitchhiker's Guide to PlantUML documentation]]
- [[https://github.com/milo-minderbinder/AWS-PlantUML][PlantUML sprites, macros, and other includes for AWS components]]
- [[https://wiseman.net.au/2020-04-22/document-software-using-c4model-and-plantuml][Documenting Software Architecture using the C4 model and PlantUML]]
- [[https://lukemerrett.com/c4-diagrams-as-code-architectural-joy/amp/][C4, Diagrams as Code & Architectural Joy]]
- [[http://martyice.github.io/uml-in-postman/][Generating UML Diagrams with Postman]]
- [[https://blog.jdriven.com/2021/10/PlantUML-Pleasantness-Change-Look-and-feel-With-Themes/][Change look and feel for PlantUML by using themes]]
- [[https://www.codit.eu/blog/plantuml-tips-and-tricks/][PlantUML tips and tricks]]
- [[https://plantuml.com/preprocessing][How to pre-process in PlantUML, especially when dealing with raw JSON or YAML]]
- [[https://www.onwebsecurity.com/configuration/use-emacs-to-create-oauth-2-0-uml-sequence-diagrams.html][Use Emacs to create OAuth 2.0 UML sequence diagrams]]
* Literate programming
- You can use [[https://orgmode.org/worg/org-contrib/babel/][ORG babel]] to execute code within ORG documents.
- similar to IPython/[[https://jupyter.org/][Jupyter]] notebooks
- you can use [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel]] to document your code and the results/output at the same place.

** Shell
#+CAPTION: Source
#+begin_src shell :exports both :results raw code
uname
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+CAPTION: Results
#+RESULTS:
#+begin_src shell
Linux
#+end_src

** HTTP requests
#+CAPTION: Source
#+BEGIN_SRC http :pretty :exports both :results raw code
GET https://api.github.com/repos/zweifisch/ob-http/languages
Accept: application/vnd.github.moondragon+json
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+CAPTION: Results
#+RESULTS:
#+begin_src http
{
  "Emacs Lisp": 15327,
  "Shell": 139
}
#+end_src

[[https://github.com/zweifisch/ob-http][ob-http]] is awesome!

** Elisp
#+CAPTION: Source
#+begin_src emacs-lisp :exports both :results raw code
(directory-files ".")
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+CAPTION: Results
#+RESULTS:
#+begin_src emacs-lisp
("." ".." "2022-presentations-as-code.org" "images" "index.org" "notes-style.setup" "reveal.setup" "revealjs-plugins-conf.js" "themes")
#+end_src

** Golang

#+CAPTION: Source
#+begin_src go :exports both :results output code
package main
import "fmt"

func main() {
    queue := make(chan string, 2)
    queue <- "one"
    queue <- "two"
    close(queue)

    for elem := range queue {
        fmt.Println(elem)
    }
}
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+CAPTION: Results
#+RESULTS:
#+begin_src go
one
two
#+end_src

** Python
#+CAPTION: Source
#+BEGIN_SRC python :exports both :results output code
num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+RESULTS:
#+begin_src python
The square root of 8.000 is 2.828
#+end_src
** gnuplot
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%; font-size: 14px;">
#+tblname: grades
| Ben  | 9.2 | 9.9 |
| Tim  | 6.7 | 7.7 |
| Tom  | 7.5 | 6.7 |
| Dean | 8.0 | 7.0 |

#+CAPTION: Source
#+begin_src gnuplot :var data=grades :exports both :results silent :file ./images/grades.png
set title "Students' Grades"
set yrange[0:10]
set style data histogram
set terminal png size 400,300
plot data using 2:xtic(1) title 'Maths', '' using ($3) title 'Physics'
#+end_src
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
#+ATTR_REVEAL: :frag (appear)
#+RESULTS:
[[file:./images/grades.png]]
#+REVEAL_HTML: </div>

- [[http://gewhere.github.io/gnuplot-orgmode][Source]]

* Conclusion
- [[https://orgmode.org/][ORG mode]] is still one of the most powerful markup languages for text
- if you don't have the time (and motivation) to learn Emacs/ORG mode
  + have a look at [[https://asciidoctor.org][asciidoctor]] and ~asciidoc~
  + if you don't like ~ruby~ and ~gems~, check out [[https://github.com/asciidoctor/asciidoctorj][AsciidoctorJ]] which is a library for running ~asciidoctor~ on the JVM
  + there are tons of [[https://asciidoctor.org/docs/extensions/][extensions]] you can chose from
- creating beautiful presentations for ~reveal.js~ is fun and doable just by writing (markup) *code*
- convince yourself and have a look at the [[https://github.com/dorneanu/slides/blob/main/content/2022-presentations-as-code.org][source]] of this presentation
  + text content and images at the same place
  + charts can be easily embedded via custom HTML code
  + all sorts of diagrams can be generated using PlantUML
  + you can focus on writing content rather than fixing your presentation's layout
- you can do way more with ORG
  + [[https://orgmode.org/worg/org-tutorials/index.html][ORG tutorials]] is full of interesting ideas

* Contact
- About ::  [[https://dornea.nu][dornea.nu]]
- Blog :: [[https://blog.dornea.nu][blog.dornea.nu]]
- Github :: [[https://github.com/dorneanu][github.com/dorneanu]]
- Twitter :: [[https://twitter.com/victordorneanu][@victordorneanu]]
- LinkedIn :: [[https://www.linkedin.com/in/victor-dorneanu-4bba23101][linkedin.com/in/victor-dorneanu]]
- Threema :: [[https://threema.id/HCPNAFRD][HCPNAFRD]]
* Setup                                                                         :noexport:
# Local variables:
# after-save-hook: org-re-reveal-export-to-html
# end:
